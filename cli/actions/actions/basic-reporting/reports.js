const mrMarkdownBuilder = require('mr_markdown_builder')

// Globals
const MAPS_WARNING = `**Notice:** If you are using Safari a geojson map may not display correctly unless you disable the \`Prevent cross-site tracking\` feature in the \`Privacy tab\` of Safari's preferences. Disabling cross-site tracking in Safari is a workaround and the GitHub team is working on a fix to this issue. You can add any additional information on this matter in the GitHub Community discussion [GeoJSON rendering is broken #19258](https://github.com/orgs/community/discussions/19258). However, geojson rendering has been tested and works with Chrome and Edge, but if there is only a single point on the map you will need to zoom-out to see the point's context.\n`

const ACTION_WARNING = `**Notice:** This page is automatically generated by the custom GitHub action \`basic-reporting\`. It is scheduled to run at 12:00 AM everyday and will update \`README.md\` files in the \`/Companies\` directory, generate a \`<company-name>.md\` file for each company in the \`/Companies\` directory, and update the main \`README.md\` file in the root of the repository.  Manual updates to these files are not recommended as they will be overwritten the next time the action runs.\n`

async function createBadges (company) {
    // Create a badge for the company role
    const badgesRow = [
        await mrMarkdownBuilder.badge(encodeURIComponent('Role'), company.role),
        await mrMarkdownBuilder.badge(encodeURIComponent('Type'), encodeURIComponent(company.company_type)),
        await mrMarkdownBuilder.badge(encodeURIComponent('Region'), company.region),
        await mrMarkdownBuilder.badge(encodeURIComponent('Creator'), encodeURIComponent(company.creator_name))
    ]
    return "\n" + badgesRow.join('&nbsp;&nbsp;') + "\n"
}

function createIndustryList (company) {
    const industryDataList = [
        `**Industry** &#8594; ${company.industry} (Code: ${company.industry_code})`,
        `**Industry Group** &#8594; ${company.industry_group_description} (Code: ${company.industry_group_code})`,
        `**Major Group** &#8594; ${company.major_group_description} (Code: ${company.major_group_code})`
    ]
    // Create a list of industries
    const industryList = `${mrMarkdownBuilder.h2('Standard Industry Code (SIC) Details')}\n${mrMarkdownBuilder.ul(industryDataList)}`
    return industryList
}

function createCompanyWebLinkList (company) {

    // Create the table rows
    let wikipediaURL
    company.wikipedia_url === 'Unknown' ? 
        wikipediaURL = `The Wikipedia URL is ${company.wikipedia_url}` :
        wikipediaURL = mrMarkdownBuilder.link(`Wikipedia for ${company.name}`, company.wikipedia_url)
    let listItems = [
        
        [wikipediaURL],
        [mrMarkdownBuilder.link(`${company.name} on Google News`, company.google_news_url)],
        [mrMarkdownBuilder.link(`Map for ${company.name}`, company.google_maps_url)],
        [mrMarkdownBuilder.link(`${company.name} Patents`, company.google_patents_url)]
    ]
    // If the company is public then add the public properties
    if (company.company_type === 'Public') {
        const propertyToName = {
            google_finance_url: 'Google Finance', 
            recent10k_url: 'Most Recent 10-K Filing', 
            recent10q_url: 'Most Recent 10-Q Filing', 
            firmographics_url: 'SEC EDGAR Firmographics', 
            filings_url: `All Filings for ${company.name}`, 
            owner_transactions_url: 'Shareholder Transactions'
        }
        for (const property in [
            'google_finance_url', 'recent10k_url', 'recent10q_url', 'firmographics_url', 'filings_url', 'owner_transactions_url']
        ) {
            if (company[property] !== 'Unknown') { continue }
            listItems.push([mrMarkdownBuilder.link(propertyToName[property], company[property])])
        }
    }
    // Create the table
    return mrMarkdownBuilder.h2('Key Web Links') + "\n" + mrMarkdownBuilder.ul(listItems)
}

function createInteractionList (company, interactions) {
    // Create a list of interactions
    const interactionNames = Object.keys(company.linked_interactions)
    const interactionList = interactionNames.map((interactionName) => {
        // Find the interaction object that matches the interaction name
        const interaction = interactions.find((interaction) => interaction.name === interactionName)
        // Create link internal link to the interaction file    
        const interactionLink = mrMarkdownBuilder.link(interaction.name, `/${encodeURI(interaction.url)}`)
        return interactionLink
    })
    
    return `${mrMarkdownBuilder.h2('Interactions')} \n ${mrMarkdownBuilder.ul(interactionList)}`
}

function createCompanyMap (company) {
    // Check to see if either the latitude or longitude is "Unknown" and if so return false
    if (company.latitude === 'Unknown' || company.longitude === 'Unknown') {
        return ''
    }
    let geoJsonMarkdown = mrMarkdownBuilder.h2('Location')
    geoJsonMarkdown += MAPS_WARNING
    // Create the location JSON
    const geoJson = {
        type: 'Feature',
        geometry: {
            type: 'Point',
            coordinates: [company.longitude, company.latitude]
        },
        properties: {
            name: company.name,
            description: company.description,
            role: company.role,
            url: company.url
        }
    }
    // Add the geojson object to the company file
    geoJsonMarkdown += mrMarkdownBuilder.geojson(geoJson)
    return geoJsonMarkdown
}

function createCompaniesMap (companies) {
    // Filter out companies with unknown latitude or longitude
    companies = companies.filter((company) => company.latitude !== 'Unknown' && company.longitude !== 'Unknown')
    // Create the map
    let map = mrMarkdownBuilder.h1('Company Locations')
    map += MAPS_WARNING
    map += mrMarkdownBuilder.geojson({
        type: 'FeatureCollection',
        features: companies.map((company) => {
            return {
                type: 'Feature',
                geometry: {
                    type: 'Point',
                    coordinates: [company.longitude, company.latitude]
                },
                properties: {
                    name: company.name,
                    description: company.description,
                    role: company.role,
                    url: company.url
                }
            }
        })
    })
    // return the map
    return map
}

async function createCompanyReports (companies, interactions, reports) {
    let companiesReports = []
    const suffix = '.md'
    const prefix = reports.company
    for (let company of companies) {
      // Get the name of the company and remove spaces, commas, periods, question marks, and exclamation points
      const companyFileName = company.name.replace(/[\s,.\?!]/g, '')
      // Using the emphasis module create a bolded version of the string "Company Name:"
      const companyLogo = mrMarkdownBuilder.imageWithSize(`${company.name} Logo`, company.logo_url, 25, company.name)
      // Call the h1 method from the headers module
      let companyFile = `[${mrMarkdownBuilder.link('Back to Company Directory', './README.md')}]\n`
      companyFile += mrMarkdownBuilder.hr()
      companyFile += mrMarkdownBuilder.h1(`${companyLogo} ${mrMarkdownBuilder.link(company.name, company.url)}`)
      // Add a line break
      companyFile += "\n"
      // Add the company badges
      companyFile += await createBadges(company)
      // Add a line break
      companyFile += "\n"
      // Add the company description
      companyFile += `${mrMarkdownBuilder.b('Description:')} ${company.description}`
      // Add a line break
      companyFile += "\n"
      // Add a horizontal rule
      companyFile += mrMarkdownBuilder.hr()
      // Add a line break
      companyFile += "\n"
      // Create the Industry List
      companyFile += createIndustryList(company)
      // If there are linked_interactions in the company then create the interaction list
      if (Object.keys(company.linked_interactions).length > 0) {
          companyFile += createInteractionList(company, interactions)
      }
  
      // Add a line break
      companyFile += "\n"
  
      // Create the company table
      companyFile += createCompanyWebLinkList(company)
  
      // Add a line break
      companyFile += "\n"
  
      // Add an h2 for the company's location
      companyFile += createCompanyMap(company)
  
      // Add a line break
      companyFile += "\n"
  
      // Add a horizontal rule
      companyFile += mrMarkdownBuilder.hr()
  
      // Add the creation date
      companyFile += `[ ${mrMarkdownBuilder.b('Created:')} ${company.creation_date} by ${company.creator_name} | ${mrMarkdownBuilder.b('Modified:')} ${company.modification_date} ]`
      
      // Return the file content   
      companiesReports.push({
            name: company.name,
            path: `${prefix}${companyFileName}${suffix}`,
            content: companyFile
      })
    }
    return companiesReports
}

function createCompaniesReport (companies) {
    let readme = `[${mrMarkdownBuilder.link('Back to main README', '../README.md')}]\n`
    readme += mrMarkdownBuilder.hr()
    readme += mrMarkdownBuilder.h1('Introduction')
    readme += `There are currently \`${companies.length}\` companies in the repository. The table below lists all available companies and some of their firmographics. Click on the company name to view the company's profile.  Below the table is a map of all companies in the repository.  Click on a company's marker to view additional company information in context.`
    readme += mrMarkdownBuilder.h1('Table of Companies')
    // Create the table header
    const tableHeader = mrMarkdownBuilder.tableHeader(['Company Name', 'Company Type', 'Company Role', 'Company Region'])
    // Create the table rows
    const tableRows = companies.map((company) => {
        const companyRow = [
            mrMarkdownBuilder.link(company.name, `./${encodeURI(company.name.replace(/[\s,.\?!]/g, ''))}.md`),
            company.company_type,
            company.role,
            company.region
        ]
        return companyRow
    })
    // Create the table
    const companyTable = tableHeader + "\n" + mrMarkdownBuilder.tableRows(tableRows)
    // Create the README.md file
    readme += companyTable
    // Add a line break
    readme += "\n"
    // Call the createMap function
    readme += createCompaniesMap(companies)
    // Return the file content
    return readme
}

// Create a function that generates the main report
function createMainReport (inputs) {
    // Loop through all of the inputs.companies to find the one company with the role of "Owner"
    const owner = inputs.companies.find((company) => company.role === 'Owner')
    // Create the owner logo
    const ownerLogo = mrMarkdownBuilder.imageWithSize(`${owner.name} Logo`, owner.logo_url, 25, owner.name)

    // Create the main report
    let readme = mrMarkdownBuilder.h1(`${ownerLogo} Product and Service Discovery Repository for ${owner.name}`)
    readme += `Welcome to your discovery repository meant to help you build products and services via an evidence based approach.  Presently, the repository contains \`${inputs.companies.length}\` companies and \`${inputs.interactions.length}\` interactions. This repository means to be the warehouse for all evidence needed to generate the why\'s and what\'s for your product or service plans.  It is intentionally integrated into GitHub to help you leverage the power of GitHub's ecosystem.`

    // Create a paragraph about companies, the title should be h2 and contain a link to the Companies/README.md file
    readme += mrMarkdownBuilder.h2(`Companies [${mrMarkdownBuilder.link('View Companies', './Companies/README.md')}]`)
    readme += `Companies are presently the primary object used and the repository contains \`${inputs.companies.length}\` of them.  This means you'll be able to find information about these companies in the repository.  Each company has a profile page containing information about the company including its name, description, industry, and location.  Additionally, each company has a list of interactions that are linked to it.`

    // Create a paragraph about interactions, the title should be h2 and not contain a link to the Interactions/README.md file
    readme += mrMarkdownBuilder.h2(`Interactions`)
    readme += `Interaction objects are essentially content related to a company.  They can include meeting notes, emails, product documentation, blog posts, audio transcripts, and more.  While each interaction is linked to a company access to the interaction is presented handled by the company that owns it.`

    readme += mrMarkdownBuilder.h2(`Studies`)
    readme += `Study objects will be a part of a future release of Mediumroast and will be a part of a paid subscription. Stay tuned for more information on this feature and a way to gain access to it.`

    readme += mrMarkdownBuilder.h2('Navigation and Modification')  
    readme +=`Direct navigation and modifcation of repository contents is not recommended. Instead this README file, and accompanying markdown files, will guide you through its contents.  Additionally, the open source node module and CLI \`mediumroast_js\` [${mrMarkdownBuilder.link('GitHub', 'https://github.com/mediumroast/mediumroast_js')}, ${mrMarkdownBuilder.link('NPM', 'https://www.npmjs.com/package/mediumroast_js')}] can be used to create, update, and delete content in the repository.`

    // Add the notice
    readme += mrMarkdownBuilder.h2('Notice')
    readme += ACTION_WARNING

    // Create a paragraph that focuses on listing the active workflows and their last status
    readme += mrMarkdownBuilder.h2('Workflows')
    // Get the current month and year and put them in a single string
    const date = new Date()
    const month = date.toLocaleString('default', { month: 'long' })
    const year = date.getFullYear()

    readme += `The repository contains \`2\` active workflows. As of \`${month}-${year}\` \`${inputs.workflows.runTime} minutes\` have been consumed. A GitHub free plan has \`2000 minutes\` available per month meaning there is \`${2000 - inputs.workflows.runTime}\` remaining minutes for the month. Assuming a repository with 10s of company objects, each workflow runs about a minute at midnight everyday. This means a good hueristic for how many minutes are consumed in a month is 2 workflows/day x 1 min/workflow x 30 days/month or \`${2*1*30} min/month\`. To get an accurate view of your consumed minutes for your planning please run \`mrcli billing\`. The statuses of five most recent workflow runs are provided below, links are included to enable more information on the workflows.\n`
    // Create the table header
    const workflowTableHeader = mrMarkdownBuilder.tableHeader(['Workflow Name', 'Last Status', 'Run Time Message', 'Run Time'])
    // Create the table rows
    const myWorkflows = inputs.workflows.allWorkFlows.slice(1, 6)
    const workflowTableRows = myWorkflows.map((workflow) => {
        const workflowRow = [
            mrMarkdownBuilder.link(workflow.name, `./.github/workflows/${workflow.name}.yml`),
            mrMarkdownBuilder.link(workflow.conclusion, workflow.html_url),
            workflow.run_time_name,
            `${workflow.run_time_minutes} minute(s)`
        ]
        return workflowRow
    })
    // Create the table
    const workflowTable = workflowTableHeader + "\n" + mrMarkdownBuilder.tableRows(workflowTableRows)
    // Add the table to the README.md file
    readme += workflowTable

    // // Add a line break
    // readme += "\n"

    // Create a paragraph that lists the branches and their last commit
    // readme += mrMarkdownBuilder.h2('Branches')
    // readme += `The repository contains \`${inputs.branches.length}\` branches.  The last commit of each branch is listed below.  Click on the branch name to view the branch.\n`
    // // Create the table header
    // const branchTableHeader = mrMarkdownBuilder.tableHeader(['Branch Name', 'Last Commit'])
    // // Create the table rows
    // const branchTableRows = inputs.branches.map((branch) => {
    //     const branchRow = [
    //         mrMarkdownBuilder.link(branch.name, `./tree/${branch.name}`),
    //         branch.last_commit
    //     ]
    //     return branchRow
    // })
    // // Create the table
    // const branchTable = branchTableHeader + "\n" + mrMarkdownBuilder.tableRows(branchTableRows)
    // // Add the table to the README.md file
    // readme += branchTable
    
    // Return the report content
    return readme
}

module.exports = {
    createCompanyReports,
    createCompaniesReport,
    createMainReport
}